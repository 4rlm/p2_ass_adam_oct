# Part 3: Build a CRUD App


MODELS
> user
  username, email, password

> bids
  price, user_id, item_id

> item
  name, condition, description, start_time:datetime, end_time:datetime, status

If you use text inputs in your form, users should enter dates in the following format: YYYY-MM-DD HH:MM:SS (e.g., 2016-12-26 01:00:00).





###############

## Summary
build web-stack application

### Web Application Overview
blind auction site
bidders do not see how much other bidders have bid.
Users will be able to register with the site.
users can list items for auction
users can bid on items

## Releases
mockups of the application
URLs are omitted from the browser's address bar


### Pre-release: Setup
0. `$ bundle`
0. `$ bundle exec rake db:create`


### Release 0: User Registration
user registration
users create new accounts
homepage, add a "register" link. >> page with a form for creating a new account.
username (unique)
e-mail (unique)
password


if registration is unsuccessful >> registration form again and errors.

If registration is successful >> redirected to the homepage where the "register" link is replaced with the user's username.
This is demonstrated in Figure 1.

### Release 1: Login/Logout
login and logout.
homepage, add a "login" link next to the "register" link.
Clicking the link takes the user to a page with a form for logging in.
Users sign in with an e-mail address and password.

If unsuccessful, the user should see the login form and an error message.
If login is successful, redirected to the homepage
"login" and "register" links are replaced with the user's username and a "logout" link.

Clicking the "logout" link logs the user out and redirects the user back to the homepage.
These behaviors are demonstrated in Figure 2.



### Release 2: User Profile Page
USER MODEL
create user's profile page
On the homepage, if a user is logged in, make the username a link.
Clicking the link takes the user to the profile page, which for now is a simple page welcoming the user.
*Figure 3*.  Logging in and visiting the profile page.


### Release 3: List Items for Auction
Use the profile page for listing a user's items.

On the user profile page, add a link for listing a new item.
Clicking the link takes the user to a form.
ITEM MODEL
name, condition, description, start_time, end_time, status

When the form is submitted, if listing the item is unsuccessful (e.g., failing a validation), the user should see the form and the associated error messages.  If listing the item is successful, the user should be redirected to the profile page where the item is listed by name.  This is demonstrated in Figure 4.

*Note*:  The times an auction starts and ends should be saved in datetime fields. If you use text inputs in your form, users should enter dates in the following format: YYYY-MM-DD HH:MM:SS (e.g., 2016-12-26 01:00:00).
*Figure 4*.  Listing an item unsuccessfully and then successfully.


### Release 4: Updating Items
CRUD ITEMS
edit items: (name, description, etc.)

On the profile page where a user's auctions are listed, create an "edit" link for each item.  Clicking the link takes the user to a form for editing the item.  The form should be populated with the item's current details.  Submitting the form makes a request to update the item.

If the update is unsuccessful, the user should see the form and the associated error messages.  If updating the item is successful, the user should be redirected to the profile page.  The successful outcome is demonstrated in Figure 5.

![editing an item](readme-assets/edit-item.gif)
*Figure 5*. Successfully editing an item.


### Release 5: Deleting Items
In the same way that users might need to edit an item, they might also need to delete an item.  Add a feature that allows users to delete items which they've previously listed.

On the profile page, add a "delete" button next to the "edit" link for each item.  Clicking the button should delete the item and redirect the user back to the profile page.  This is demonstrated in Figure 6.

*Note:* The "delete" button is part of a form used to submit a RESTful request to delete an item.  In Figure 6, it is styled to look like a link.

![deleting an item](readme-assets/delete-item.gif)
*Figure 6*.  Deleting an item.


### Release 6:  Appropriate Behaviors per User and Route
Refine what you've done so far.  In particular, think about how we can provide a good, secure application for users.  Use your best judgement to make any appropriate code changes.  Be prepared to explain why your choices were appropriate.


Consider:
* Who can access the form to add an item?
* Who can access the form to edit a specific item?
* Who can edit a specific item?
* Who can delete a specific item?
* Who can view a specific user's profile?


### Release 7: Browsing Items
It's time to let users browse the items on our site.  Add a feature that lists the names of items that are currently up for auction and allows users to view a specific item's details.  Only list items for which the auction has started but not finished.  In other words, if the auction hasn't started yet, don't list the item.  If the auction is over, don't list the item.

On the homepage, list the name of each item that is currently up for auction.  The name should be a link.  Clicking the link should take the user to a page showing the details of that item auction.  Show the item's name, condition, and description along with when the auction ends.  This is demonstrated in Figure 7.

![view an item's details](readme-assets/view-item.gif)
*Figure 7*.  Viewing an item's details.


### Release 8: Bidding
Add a feature that allows users to bid on items.  Bidding will occur on the page showing an item's details.

On the page showing an item's details, add a bidding section.  Include the number of bidders for the item and a form that accepts new bids.  When submitting the form, if the bid is unsuccessfully created, the user should see the item page with the form and the associated error messages.  If the bid is successfully created, the user should be redirected to the item's show page.  Instead of seeing a form for placing a new bid, the user should see the details of the bid.  This is demonstrated in Figure 8.

![bidding on an item](readme-assets/bid-on-item.gif)
*Figure 8*.  Bidding on an item unsuccessfully and then successfully.


## Conclusion

Part-3 wraps up the assessment.  If you haven't already done so, commit your
changes.  Please wait until the end of the assessment period to submit your
solution.
